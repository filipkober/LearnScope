"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { useState } from "react";

// Sample templates and topics (would come from API in a real app)
const sampleTemplates = [
    {
        id: "1",
        name: "Computer Science Fundamentals",
        topics: ["Data Structures", "Algorithms", "Object-Oriented Programming", "Time Complexity"]
    },
    {
        id: "2",
        name: "Advanced Mathematics",
        topics: ["Calculus", "Linear Algebra", "Differential Equations", "Vector Calculus"]
    },
    {
        id: "3",
        name: "Software Engineering Practices",
        topics: ["Agile Development", "Design Patterns", "Testing Methodologies", "DevOps"]
    }
];

// Sample question generated by AI (in a real app this would come from the API)
const sampleQuestion = {
    question: "Explain the difference between stack and queue data structures and provide a real-world application for each.",
    options: [
        {
            id: "a",
            text: "Stack is LIFO, used in undo mechanisms; Queue is FIFO, used in print spoolers."
        },
        {
            id: "b",
            text: "Stack is FIFO, used in breadth-first search; Queue is LIFO, used in depth-first search."
        },
        {
            id: "c",
            text: "Both are LIFO structures but with different implementations."
        },
        {
            id: "d",
            text: "Both are FIFO structures but optimized for different operations."
        }
    ],
    correctAnswer: "a",
    explanation: "A stack follows Last In First Out (LIFO) principle where the last element added is the first one to be removed. Real-world applications include the call stack in programming languages, undo mechanisms in editors, and backtracking algorithms. A queue follows First In First Out (FIFO) principle where the first element added is the first one to be removed. Real-world applications include print spoolers, process scheduling in operating systems, and breadth-first search algorithm implementations."
};

export default function PracticePage() {
    const [selectedTemplate, setSelectedTemplate] = useState("");
    const [selectedTopic, setSelectedTopic] = useState("");
    const [questionDifficulty, setQuestionDifficulty] = useState("medium");
    const [questionGenerated, setQuestionGenerated] = useState(false);
    const [selectedAnswer, setSelectedAnswer] = useState("");
    const [answerSubmitted, setAnswerSubmitted] = useState(false);
    const [availableTopics, setAvailableTopics] = useState<string[]>([]);

    // Handle template selection
    const handleTemplateChange = (value: string) => {
        setSelectedTemplate(value);
        // Find the selected template and update available topics
        const template = sampleTemplates.find(t => t.id === value);
        setAvailableTopics(template ? template.topics : []);
        setSelectedTopic("");
    };

    // Generate a question based on selected topic
    const handleGenerateQuestion = () => {
        // In a real app, this would make an API call to generate a question
        setQuestionGenerated(true);
        setAnswerSubmitted(false);
        setSelectedAnswer("");
    };

    // Submit an answer for evaluation
    const handleSubmitAnswer = () => {
        setAnswerSubmitted(true);
    };

    // Generate another question
    const handleAnotherQuestion = () => {
        setQuestionGenerated(false);
        setAnswerSubmitted(false);
        setSelectedAnswer("");
    };

    return (
        <div className="p-6 space-y-8">
            <div>
                <h1 className="text-3xl font-bold tracking-tight">Practice</h1>
                <p className="text-muted-foreground">
                    Generate single questions to practice specific topics
                </p>
            </div>

            {!questionGenerated ? (
                <Card>
                    <CardHeader>
                        <CardTitle>Generate a Question</CardTitle>
                        <CardDescription>
                            Select a template and topic to generate a practice question
                        </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <div className="space-y-2">
                            <Label htmlFor="template">Exam Template</Label>
                            <Select value={selectedTemplate} onValueChange={handleTemplateChange}>
                                <SelectTrigger id="template">
                                    <SelectValue placeholder="Select a template" />
                                </SelectTrigger>
                                <SelectContent>
                                    {sampleTemplates.map(template => (
                                        <SelectItem key={template.id} value={template.id}>
                                            {template.name}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="topic">Topic</Label>
                            <Select 
                                value={selectedTopic} 
                                onValueChange={setSelectedTopic}
                                disabled={!selectedTemplate}
                            >
                                <SelectTrigger id="topic">
                                    <SelectValue placeholder={selectedTemplate ? "Select a topic" : "Select a template first"} />
                                </SelectTrigger>
                                <SelectContent>
                                    {availableTopics.map((topic, index) => (
                                        <SelectItem key={index} value={topic}>
                                            {topic}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-2">
                            <Label>Difficulty Level</Label>
                            <RadioGroup 
                                defaultValue="medium" 
                                value={questionDifficulty}
                                onValueChange={setQuestionDifficulty}
                                className="flex space-x-4"
                            >
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="easy" id="easy" />
                                    <Label htmlFor="easy">Easy</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="medium" id="medium" />
                                    <Label htmlFor="medium">Medium</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="hard" id="hard" />
                                    <Label htmlFor="hard">Hard</Label>
                                </div>
                            </RadioGroup>
                        </div>
                    </CardContent>
                    <CardFooter>
                        <Button 
                            onClick={handleGenerateQuestion}
                            disabled={!selectedTemplate || !selectedTopic}
                        >
                            Generate Question
                        </Button>
                    </CardFooter>
                </Card>
            ) : (
                <div className="space-y-6">
                    <Card>
                        <CardHeader>
                            <div className="flex justify-between items-start">
                                <div>
                                    <CardTitle>Question</CardTitle>
                                    <CardDescription>
                                        Topic: {selectedTopic} • Difficulty: {questionDifficulty.charAt(0).toUpperCase() + questionDifficulty.slice(1)}
                                    </CardDescription>
                                </div>
                                <Button variant="outline" size="sm" onClick={handleAnotherQuestion}>
                                    Try Another Question
                                </Button>
                            </div>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div>
                                <p className="text-lg font-medium">{sampleQuestion.question}</p>
                            </div>
                            
                            <RadioGroup 
                                value={selectedAnswer}
                                onValueChange={setSelectedAnswer}
                                disabled={answerSubmitted}
                                className="space-y-3"
                            >
                                {sampleQuestion.options.map((option) => (
                                    <div 
                                        key={option.id}
                                        className={`flex items-start space-x-3 p-3 rounded-md ${
                                            answerSubmitted && option.id === sampleQuestion.correctAnswer
                                                ? "bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-900"
                                                : answerSubmitted && option.id === selectedAnswer && option.id !== sampleQuestion.correctAnswer
                                                ? "bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900"
                                                : ""
                                        }`}
                                    >
                                        <RadioGroupItem value={option.id} id={option.id} className="mt-1" />
                                        <Label htmlFor={option.id} className="flex-grow text-base font-normal">
                                            {option.text}
                                        </Label>
                                    </div>
                                ))}
                            </RadioGroup>
                        </CardContent>
                        <CardFooter className="flex justify-between">
                            {!answerSubmitted ? (
                                <Button onClick={handleSubmitAnswer} disabled={!selectedAnswer}>
                                    Submit Answer
                                </Button>
                            ) : (
                                <Button variant="outline" onClick={handleAnotherQuestion}>
                                    New Question
                                </Button>
                            )}
                        </CardFooter>
                    </Card>
                    
                    {answerSubmitted && (
                        <Card>
                            <CardHeader>
                                <CardTitle>Explanation</CardTitle>
                            </CardHeader>
                            <CardContent>
                                <p>
                                    {selectedAnswer === sampleQuestion.correctAnswer ? 
                                        "✅ Correct answer! " : 
                                        "❌ Incorrect answer. "}
                                    {sampleQuestion.explanation}
                                </p>
                            </CardContent>
                        </Card>
                    )}
                </div>
            )}
        </div>
    );
}