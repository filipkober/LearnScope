"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { useState } from "react";
import { Question as QuestionComponent, Question } from "@/components/Question";

// Sample templates and topics (would come from API in a real app)
const sampleTemplates = [
    {
        id: "1",
        name: "Computer Science Fundamentals",
        topics: ["Data Structures", "Algorithms", "Object-Oriented Programming", "Time Complexity"]
    },
    {
        id: "2",
        name: "Advanced Mathematics",
        topics: ["Calculus", "Linear Algebra", "Differential Equations", "Vector Calculus"]
    },
    {
        id: "3",
        name: "Software Engineering Practices",
        topics: ["Agile Development", "Design Patterns", "Testing Methodologies", "DevOps"]
    }
];

// Sample questions generated by AI (in a real app these would come from the API)
const sampleQuestions: Record<string, Question> = {
    closed: {
        id: "q1",
        type: "closed",
        question: "Explain the difference between stack and queue data structures and provide a real-world application for each.",
        options: [
            {
                id: "a",
                text: "Stack is LIFO, used in undo mechanisms; Queue is FIFO, used in print spoolers."
            },
            {
                id: "b",
                text: "Stack is FIFO, used in breadth-first search; Queue is LIFO, used in depth-first search."
            },
            {
                id: "c",
                text: "Both are LIFO structures but with different implementations."
            },
            {
                id: "d",
                text: "Both are FIFO structures but optimized for different operations."
            }
        ],
        correctAnswer: "a",
        explanation: "A stack follows Last In First Out (LIFO) principle where the last element added is the first one to be removed. Real-world applications include the call stack in programming languages, undo mechanisms in editors, and backtracking algorithms. A queue follows First In First Out (FIFO) principle where the first element added is the first one to be removed. Real-world applications include print spoolers, process scheduling in operating systems, and breadth-first search algorithm implementations."
    },
    open: {
        id: "q2",
        type: "open",
        question: "Explain the concept of inheritance in object-oriented programming and provide an example.",
        correctAnswer: "Inheritance is a mechanism in object-oriented programming that allows a class to inherit properties and methods from another class. The class that inherits is called a subclass or derived class, and the class from which it inherits is called a superclass or base class.",
        explanation: "Inheritance is a fundamental concept in OOP that promotes code reuse and establishes a relationship between classes. For example, a 'Vehicle' class might have properties like 'speed' and methods like 'accelerate()'. Then, specific types of vehicles like 'Car' and 'Motorcycle' can inherit from Vehicle, gaining these properties and methods while also adding their own unique features."
    }
};

export default function PracticePage() {
    const [selectedTemplate, setSelectedTemplate] = useState("");
    const [selectedTopic, setSelectedTopic] = useState("");
    const [questionDifficulty, setQuestionDifficulty] = useState("medium");
    const [questionGenerated, setQuestionGenerated] = useState(false);
    const [availableTopics, setAvailableTopics] = useState<string[]>([]);
    const [currentQuestion, setCurrentQuestion] = useState<Question | null>(null);

    // Handle template selection
    const handleTemplateChange = (value: string) => {
        setSelectedTemplate(value);
        // Find the selected template and update available topics
        const template = sampleTemplates.find(t => t.id === value);
        setAvailableTopics(template ? template.topics : []);
        setSelectedTopic("");
    };

    // Generate a question based on selected topic
    const handleGenerateQuestion = () => {
        // In a real app, this would make an API call to generate a question
        // Randomly choose between open and closed question types
        const questionType = Math.random() > 0.5 ? "open" : "closed";
        
        // Create a copy of the sample question with the selected topic and difficulty
        const questionWithMeta = {
            ...sampleQuestions[questionType],
            topic: selectedTopic,
            difficulty: questionDifficulty
        };
        
        setCurrentQuestion(questionWithMeta);
        setQuestionGenerated(true);
    };

    // Generate another question
    const handleAnotherQuestion = () => {
        setQuestionGenerated(false);
        setCurrentQuestion(null);
    };

    return (
        <div className="p-6 space-y-8">
            <div>
                <h1 className="text-3xl font-bold tracking-tight">Practice</h1>
                <p className="text-muted-foreground">
                    Generate single questions to practice specific topics
                </p>
            </div>

            {!questionGenerated ? (
                <Card>
                    <CardHeader>
                        <CardTitle>Generate a Question</CardTitle>
                        <CardDescription>
                            Select a template and topic to generate a practice question
                        </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <div className="space-y-2">
                            <Label htmlFor="template">Exam Template</Label>
                            <Select value={selectedTemplate} onValueChange={handleTemplateChange}>
                                <SelectTrigger id="template">
                                    <SelectValue placeholder="Select a template" />
                                </SelectTrigger>
                                <SelectContent>
                                    {sampleTemplates.map(template => (
                                        <SelectItem key={template.id} value={template.id}>
                                            {template.name}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="topic">Topic</Label>
                            <Select 
                                value={selectedTopic} 
                                onValueChange={setSelectedTopic}
                                disabled={!selectedTemplate}
                            >
                                <SelectTrigger id="topic">
                                    <SelectValue placeholder={selectedTemplate ? "Select a topic" : "Select a template first"} />
                                </SelectTrigger>
                                <SelectContent>
                                    {availableTopics.map((topic, index) => (
                                        <SelectItem key={index} value={topic}>
                                            {topic}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-2">
                            <Label>Difficulty Level</Label>
                            <RadioGroup 
                                defaultValue="medium" 
                                value={questionDifficulty}
                                onValueChange={setQuestionDifficulty}
                                className="flex space-x-4"
                            >
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="easy" id="easy" />
                                    <Label htmlFor="easy">Easy</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="medium" id="medium" />
                                    <Label htmlFor="medium">Medium</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="hard" id="hard" />
                                    <Label htmlFor="hard">Hard</Label>
                                </div>
                            </RadioGroup>
                        </div>
                    </CardContent>
                    <CardFooter>
                        <Button 
                            onClick={handleGenerateQuestion}
                            disabled={!selectedTemplate || !selectedTopic}
                        >
                            Generate Question
                        </Button>
                    </CardFooter>
                </Card>
            ) : currentQuestion ? (
                <QuestionComponent 
                    question={currentQuestion} 
                    onNext={handleAnotherQuestion}
                />
            ) : null}
        </div>
    );
}